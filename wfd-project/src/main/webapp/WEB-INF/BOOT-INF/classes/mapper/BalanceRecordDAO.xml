<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.toby.pay.dao.BalanceRecordDAO">
  <resultMap id="BaseResultMap" type="com.toby.pay.model.mybatis.BalanceRecord">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="merchant_id" jdbcType="INTEGER" property="merchantId" />
    <result column="before" jdbcType="DECIMAL" property="before" />
    <result column="after" jdbcType="DECIMAL" property="after" />
    <result column="difference" jdbcType="DECIMAL" property="difference" />
    <result column="reason" jdbcType="VARCHAR" property="reason" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="relevant_order_id" jdbcType="VARCHAR" property="relevantOrderId" />
    <result column="type" jdbcType="INTEGER" property="type" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, merchant_id, `before`, `after`, difference, reason, create_time, relevant_order_id, 
    `type`
  </sql>
  <select id="selectByExample" parameterType="com.toby.pay.model.mybatis.BalanceRecordExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from balance_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from balance_record
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from balance_record
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.toby.pay.model.mybatis.BalanceRecordExample">
    delete from balance_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.toby.pay.model.mybatis.BalanceRecord" useGeneratedKeys="true">
    insert into balance_record (merchant_id, `before`, `after`, 
      difference, reason, create_time, 
      relevant_order_id, `type`)
    values (#{merchantId,jdbcType=INTEGER}, #{before,jdbcType=DECIMAL}, #{after,jdbcType=DECIMAL}, 
      #{difference,jdbcType=DECIMAL}, #{reason,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{relevantOrderId,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.toby.pay.model.mybatis.BalanceRecord" useGeneratedKeys="true">
    insert into balance_record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="merchantId != null">
        merchant_id,
      </if>
      <if test="before != null">
        `before`,
      </if>
      <if test="after != null">
        `after`,
      </if>
      <if test="difference != null">
        difference,
      </if>
      <if test="reason != null">
        reason,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="relevantOrderId != null">
        relevant_order_id,
      </if>
      <if test="type != null">
        `type`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="merchantId != null">
        #{merchantId,jdbcType=INTEGER},
      </if>
      <if test="before != null">
        #{before,jdbcType=DECIMAL},
      </if>
      <if test="after != null">
        #{after,jdbcType=DECIMAL},
      </if>
      <if test="difference != null">
        #{difference,jdbcType=DECIMAL},
      </if>
      <if test="reason != null">
        #{reason,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="relevantOrderId != null">
        #{relevantOrderId,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.toby.pay.model.mybatis.BalanceRecordExample" resultType="java.lang.Long">
    select count(*) from balance_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update balance_record
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.merchantId != null">
        merchant_id = #{record.merchantId,jdbcType=INTEGER},
      </if>
      <if test="record.before != null">
        `before` = #{record.before,jdbcType=DECIMAL},
      </if>
      <if test="record.after != null">
        `after` = #{record.after,jdbcType=DECIMAL},
      </if>
      <if test="record.difference != null">
        difference = #{record.difference,jdbcType=DECIMAL},
      </if>
      <if test="record.reason != null">
        reason = #{record.reason,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.relevantOrderId != null">
        relevant_order_id = #{record.relevantOrderId,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null">
        `type` = #{record.type,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update balance_record
    set id = #{record.id,jdbcType=INTEGER},
      merchant_id = #{record.merchantId,jdbcType=INTEGER},
      `before` = #{record.before,jdbcType=DECIMAL},
      `after` = #{record.after,jdbcType=DECIMAL},
      difference = #{record.difference,jdbcType=DECIMAL},
      reason = #{record.reason,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      relevant_order_id = #{record.relevantOrderId,jdbcType=VARCHAR},
      `type` = #{record.type,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.toby.pay.model.mybatis.BalanceRecord">
    update balance_record
    <set>
      <if test="merchantId != null">
        merchant_id = #{merchantId,jdbcType=INTEGER},
      </if>
      <if test="before != null">
        `before` = #{before,jdbcType=DECIMAL},
      </if>
      <if test="after != null">
        `after` = #{after,jdbcType=DECIMAL},
      </if>
      <if test="difference != null">
        difference = #{difference,jdbcType=DECIMAL},
      </if>
      <if test="reason != null">
        reason = #{reason,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="relevantOrderId != null">
        relevant_order_id = #{relevantOrderId,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        `type` = #{type,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.toby.pay.model.mybatis.BalanceRecord">
    update balance_record
    set merchant_id = #{merchantId,jdbcType=INTEGER},
      `before` = #{before,jdbcType=DECIMAL},
      `after` = #{after,jdbcType=DECIMAL},
      difference = #{difference,jdbcType=DECIMAL},
      reason = #{reason,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      relevant_order_id = #{relevantOrderId,jdbcType=VARCHAR},
      `type` = #{type,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>